Data Analytics II
1. Implement logistic regression using Python/R to perform classification on
Social_Network_Ads.csv dataset.
2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall
on the given dataset.


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

df = pd.read_csv(r'C:\Users\Sumeet\OneDrive\Desktop\Dataset\Social_Network_Ads.csv')
df

df.isnull().sum()

x = df.drop(['User ID', 'Purchased', 'Gender'], axis=1)
x

y = df['Purchased']
y

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

x_test

classifier = LogisticRegression(random_state=0)
classifier.fit(x_train, y_train)

y_train_pred = classifier.predict(x_train)
y_test_pred = classifier.predict(x_test)

y_train_pred

y_test_pred

classifier.predict([[19,19000]])

classifier.predict([[-0.79895082, -1.41706417]])

classifier.predict([[-0.215686, 2.146016]])

matrix = confusion_matrix(y_test, y_test_pred)
matrix

score = accuracy_score(y_test, y_test_pred)
score

print(classification_report(y_test, y_test_pred))

print('True Positive:', matrix[0][0])
print('True Negative:', matrix[1][1])
print('False Positive:', matrix[0][1])
print('False Negative:', matrix[1][0])
print('Accuracy:', score)
print('Error Rate:', 1-score)
precision = matrix[0][0]/(matrix[0][0]+matrix[0][1])
print('Precision:', precision)